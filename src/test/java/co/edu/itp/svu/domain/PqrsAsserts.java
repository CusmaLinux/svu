package co.edu.itp.svu.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PqrsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPqrsAllPropertiesEquals(Pqrs expected, Pqrs actual) {
        assertPqrsAutoGeneratedPropertiesEquals(expected, actual);
        assertPqrsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPqrsAllUpdatablePropertiesEquals(Pqrs expected, Pqrs actual) {
        assertPqrsUpdatableFieldsEquals(expected, actual);
        assertPqrsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPqrsAutoGeneratedPropertiesEquals(Pqrs expected, Pqrs actual) {
        assertThat(expected)
            .as("Verify Pqrs auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPqrsUpdatableFieldsEquals(Pqrs expected, Pqrs actual) {
        assertThat(expected)
            .as("Verify Pqrs relevant properties")
            .satisfies(e -> assertThat(e.getTitulo()).as("check titulo").isEqualTo(actual.getTitulo()))
            .satisfies(e -> assertThat(e.getDescripcion()).as("check descripcion").isEqualTo(actual.getDescripcion()))
            .satisfies(e -> assertThat(e.getFechaCreacion()).as("check fechaCreacion").isEqualTo(actual.getFechaCreacion()))
            .satisfies(e ->
                assertThat(e.getFechaLimiteRespuesta()).as("check fechaLimiteRespuesta").isEqualTo(actual.getFechaLimiteRespuesta())
            )
            .satisfies(e -> assertThat(e.getEstado()).as("check estado").isEqualTo(actual.getEstado()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPqrsUpdatableRelationshipsEquals(Pqrs expected, Pqrs actual) {
        assertThat(expected)
            .as("Verify Pqrs relationships")
            .satisfies(e -> assertThat(e.getOficinaResponder()).as("check oficinaResponder").isEqualTo(actual.getOficinaResponder()));
    }
}
